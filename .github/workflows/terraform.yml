name: 'Terraform AKS'

on:
  push:
    branches: [ main ]

permissions:
  contents: read
  id-token: write

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
        
    - name: Generate SSH Key
      run: |
        ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa -N ""
        echo "SSH_PUBLIC_KEY=$(cat ~/.ssh/id_rsa.pub)" >> $GITHUB_ENV

    - name: Terraform Init
      run: |
        cd terraform
        terraform init
      
    - name: Terraform Format
      run: |
        cd terraform
        terraform fmt -check

    - name: Terraform Plan
      run: |
        cd terraform
        terraform plan -input=false -var="ssh_public_key=${{ env.SSH_PUBLIC_KEY }}"
      
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main'
      run: |
        cd terraform
        terraform apply -auto-approve -input=false -var="ssh_public_key=${{ env.SSH_PUBLIC_KEY }}"
    
    - name: Save AKS Credentials
      if: github.ref == 'refs/heads/main'
      run: |
        cd terraform
        echo "resource_group=$(terraform output -raw resource_group_name)" >> $GITHUB_OUTPUT
        echo "cluster_name=$(terraform output -raw kubernetes_cluster_name)" >> $GITHUB_OUTPUT
        echo "acr_login_server=$(terraform output -raw acr_login_server)" >> $GITHUB_OUTPUT
        
        # Salvar kubeconfig
        mkdir -p ~/.kube
        echo "$(terraform output -raw kube_config_raw)" > ~/.kube/config
        
        # Exportar para uso em workflows futuros
        KUBE_CONFIG_B64=$(base64 -w 0 ~/.kube/config)
        echo "KUBE_CONFIG=$KUBE_CONFIG_B64" >> $GITHUB_ENV
        
        # Obter credenciais do ACR
        ACR_USERNAME=$(terraform output -raw acr_admin_username)
        ACR_PASSWORD=$(terraform output -raw acr_admin_password)
        
        # Exportar para uso nos prÃ³ximos steps
        echo "ACR_USERNAME=$ACR_USERNAME" >> $GITHUB_ENV
        echo "ACR_PASSWORD=$ACR_PASSWORD" >> $GITHUB_ENV
        
    - name: Create KUBE_CONFIG Secret
      uses: gliech/create-github-secret-action@v1
      if: github.ref == 'refs/heads/main'
      with:
        name: KUBE_CONFIG
        value: ${{ env.KUBE_CONFIG }}
        pa_token: ${{ secrets.GH_PA_TOKEN }}
        
    - name: Create ACR_USERNAME Secret
      uses: gliech/create-github-secret-action@v1
      if: github.ref == 'refs/heads/main'
      with:
        name: ACR_USERNAME
        value: ${{ env.ACR_USERNAME }}
        pa_token: ${{ secrets.GH_PA_TOKEN }}
        
    - name: Create ACR_PASSWORD Secret
      uses: gliech/create-github-secret-action@v1
      if: github.ref == 'refs/heads/main'
      with:
        name: ACR_PASSWORD
        value: ${{ env.ACR_PASSWORD }}
        pa_token: ${{ secrets.GH_PA_TOKEN }}
        
    - name: Create ACR_LOGIN_SERVER Secret
      uses: gliech/create-github-secret-action@v1
      if: github.ref == 'refs/heads/main'
      with:
        name: ACR_LOGIN_SERVER
        value: ${{ env.acr_login_server }}
        pa_token: ${{ secrets.GH_PA_TOKEN }}